# # s = input()
# # key = input()

# # def encrypt_hill(s, key):

import numpy as np
import math

# # H√†m t√≠nh ngh·ªãch ƒë·∫£o modulo 26
# def mod_inverse(det, mod=26):
#     det = det % mod
#     for i in range(1, mod):
#         if (det * i) % mod == 1:
#             return i
#     return None  # Kh√¥ng t·ªìn t·∫°i ngh·ªãch ƒë·∫£o

# # H√†m ki·ªÉm tra ma tr·∫≠n kh√≥a c√≥ h·ª£p l·ªá kh√¥ng
# def is_valid_key(matrix):
#     det = int(round(np.linalg.det(matrix)))  # T√≠nh ƒë·ªãnh th·ª©c
#     gcd = np.gcd(det, 26)
#     return det != 0 and gcd == 1  # Ki·ªÉm tra ƒë·ªãnh th·ª©c ‚â† 0 v√† gcd(det, 26) = 1

# # H√†m chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh vector s·ªë
# def text_to_matrix(text, size):
#     text = text.upper().replace(" ", "")  # Chuy·ªÉn th√†nh ch·ªØ hoa, x√≥a kho·∫£ng tr·∫Øng
#     while len(text) % size != 0:
#         text += "X"  # Padding n·∫øu c·∫ßn
#     matrix = [ord(char) - ord('A') for char in text]
#     return np.array(matrix).reshape(-1, size)

# # H√†m chuy·ªÉn ƒë·ªïi vector s·ªë th√†nh vƒÉn b·∫£n
# def matrix_to_text(matrix):
#     text = "".join(chr(int(num) + ord('A')) for num in matrix.flatten())
#     return text

# # H√†m m√£ h√≥a Hill Cipher
# def hill_encrypt(plain_text, key_matrix):
#     size = len(key_matrix)
#     plain_matrix = text_to_matrix(plain_text, size)
#     cipher_matrix = (np.dot(plain_matrix, key_matrix) % 26).flatten()
#     return matrix_to_text(cipher_matrix)

# # H√†m gi·∫£i m√£ Hill Cipher
# def hill_decrypt(cipher_text, key_matrix):
#     size = len(key_matrix)
#     det = int(round(np.linalg.det(key_matrix)))  # ƒê·ªãnh th·ª©c c·ªßa ma tr·∫≠n kh√≥a
#     det_inv = mod_inverse(det, 26)  # Ngh·ªãch ƒë·∫£o modulo 26

#     if det_inv is None:
#         return "Kh√¥ng th·ªÉ gi·∫£i m√£: Ma tr·∫≠n kh√≥a kh√¥ng kh·∫£ ngh·ªãch!"

#     # T√≠nh ma tr·∫≠n ngh·ªãch ƒë·∫£o modulo 26
#     adj_matrix = np.round(det * np.linalg.inv(key_matrix)).astype(int) % 26
#     inv_key_matrix = (det_inv * adj_matrix) % 26

#     cipher_matrix = text_to_matrix(cipher_text, size)
#     plain_matrix = (np.dot(cipher_matrix, inv_key_matrix) % 26).flatten()
#     return matrix_to_text(plain_matrix)

# # Nh·∫≠p d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng
# plain_text = input("Nh·∫≠p b·∫£n r√µ: ").strip()
# key_input = input("Nh·∫≠p ma tr·∫≠n kh√≥a (c√°c s·ªë c√°ch nhau b·ªüi d·∫•u c√°ch): ").strip()

# # Chuy·ªÉn ma tr·∫≠n kh√≥a t·ª´ chu·ªói th√†nh m·∫£ng s·ªë
# key_numbers = list(map(int, key_input.split()))
# size = int(len(key_numbers) ** 0.5)

# if size * size != len(key_numbers):
#     print("L·ªói: Ma tr·∫≠n kh√≥a ph·∫£i l√† ma tr·∫≠n vu√¥ng!")
# else:
#     key_matrix = np.array(key_numbers).reshape(size, size)

#     if not is_valid_key(key_matrix):
#         print("L·ªói: Ma tr·∫≠n kh√≥a kh√¥ng h·ª£p l·ªá (det = 0 ho·∫∑c gcd(det, 26) ‚â† 1)!")
#     else:
#         cipher_text = hill_encrypt(plain_text, key_matrix)
#         decrypted_text = hill_decrypt(cipher_text, key_matrix)

#         print(f"\nüîê M√£ h√≥a: {cipher_text}")
#         print(f"üîì Gi·∫£i m√£: {decrypted_text}")


s = input()
key = list(map(int, input().strip().split()))

def check_matrix(matrix):
    det = int(round(np.linalg.det(matrix)))  # T√≠nh ƒë·ªãnh th·ª©c
    gcd = np.gcd(det, 26)
    return det != 0 and gcd == 1  # Ki·ªÉm tra ƒë·ªãnh th·ª©c ‚â† 0 v√† gcd(det, 26) = 1

def text_to_matrix(text, size):
    text = text.upper().replace(" ", "")  # Chuy·ªÉn th√†nh ch·ªØ hoa, x√≥a kho·∫£ng tr·∫Øng

    # T√≠nh s·ªë c·ªôt c·∫ßn c√≥

    cols = math.ceil(len(text) / size)
    print(cols)
    # Th√™m padding n·∫øu c·∫ßn
    while len(text) % size != 0:
        text += "X"  # Padding b·∫±ng 'X' (23)

    # Kh·ªüi t·∫°o ma tr·∫≠n NumPy v·ªõi s·ªë nguy√™n
    matrix = np.zeros((size, cols), dtype=int)

    # ƒêi·ªÅn gi√° tr·ªã v√†o ma tr·∫≠n theo h√†ng
    for i in range(size):
        for j in range(cols):
            matrix[i][j] = ord(text[i * cols + j]) - ord('A')

    return matrix

def matrix_to_text(matrix):
    text = ""
    for i in range(matrix.shape[0]):
        for j in range(matrix.shape[1]):
            text += chr(int(matrix[i][j]) + ord('A'))
    return text

def hill_encrypt(plain_text, key_matrix):
    size = len(key_matrix)
    plain_matrix = text_to_matrix(plain_text, size)
    cipher_matrix = np.dot(key_matrix, plain_matrix) % 26

    print(plain_matrix)
    print(key_matrix)
    print(cipher_matrix)
    return matrix_to_text(cipher_matrix)

size = int(len(key) ** 0.5)
if(size * size != len(key)):
    print("L·ªói: Ma tr·∫≠n kh√≥a ph·∫£i l√† ma tr·∫≠n vu√¥ng!")

else:
    key_matrix = np.array(key).reshape(size, size)

    if not check_matrix(key_matrix):
        print("L·ªói: Ma tr·∫≠n kh√≥a kh√¥ng h·ª£p l·ªá (det = 0 ho·∫∑c gcd(det, 26) ‚â† 1)!")
    else:
        cipher_text = hill_encrypt(s, key_matrix)
        print(cipher_text)

